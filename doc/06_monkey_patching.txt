# Monkey-patching #[monkey-patching]

Q: When talking about JavaScript's dynamic nature, you said JavaScript was
   comparable to Ruby in this aspect. Does JavaScript also support monkey
   patching?

A: Yes, it's also possible to do monkey patching in JavaScript. In Ruby,
   classes can be modified at run-time. As seen in #[proto], JavaScript allows
   objects, and by consequence classes too,<foot>Remember that classes in
   JavaScript are emulated/implemented using objects.</foot> to be modified at
   run-time. This is just the way JavaScript works. As JavaScript is executed
   line by line, objects are also created line by line, property after
   property, constantly modifying the object.

   Monkey patching is often used to modify the behaviour of third-party or
   even standard libraries without requiring access to their source. Fixing
   bugs in libraries, mocking test objects, changing the behaviour of a
   function to suit your program, extending objects with useful methods, ...
   are all reasons to monkey patch.

   In JavaScript, you can simply modify properties of objects. A more
   effective and also more radical approach is to modify the prototypes of
   objects.

   Let's extend JavaScript's built-in object with some methods:

   ```JavaScript
   // Return the last element
   Array.prototype.last = function() {
       return this[this.length - 1];
   };
   [1, 2, 3].last(); // 3

   // Capitalise the string
   String.prototype.capitalise = function() {
       var newStr = '';
       if (this.length == 0)
           return newStr;

       newStr += this[0].toUpperCase() + this.substring(1).toLowerCase();
       return newStr;
   };
   'brendan'.capitalise(); // 'Brendan'

   // Merge two hash maps together in a new one
   Object.prototype.merge = function(obj) {
       var newObj = {};
       for (var k in this) {
           newObj[k] = this[k];
       }
       for (var k in obj) {
           newObj[k] = obj[k];
       }
       return newObj;
   };
   ({a: 1}).merge({b: 2}); // { a: 1, b: 2, merge: [Function] }
   ```

   All the methods that we added with monkey patches are quite useful. They
   seem to work correctly except for the last one: the `merge` function
   appears to have sneaked in the hash map we got back after merging the two
   hash maps. How did this happen? By adding the `merge` method to the
   prototype of `Object`, the top of the inheritance hierarchy, /every/ object
   will inherit this property and thus have a `merge` property with as value
   the newly defined function. This is obviously an unintended side-effect.

   It turns out that we can actually hide this `merge` property, by making it
   /un/enumerable.

   ```JavaScript
   Object.defineProperty(Object.prototype, 'merge', {
           enumerable: false
   });
   ({a: 1}).merge({b: 2}); // { a: 1, b: 2 }
   ```

   Q: The apparent problem seems to be solved by hiding the properties that
      were added as monkey patches. Are there any other drawbacks to monkey
      patching?

   A: The common pitfalls of monkey patching still apply:

      * Patching a method in a single place will affect the whole program,
        which can cause some unintended behaviour. However, it is possible to
        revert or remove the monkey patched methods after using
        them.<foot>Users familiar with Lisp macros will see in the example
        below a perfect opportunity for a `with-patches` macro. The
        application and removal and the patches should be put in a try- and a
        finally-clause respectively.</foot>

        ```JavaScript
        Array.prototype.last = function() {
            return this[this.length - 1];
        };
        [1, 2, 3].last(); // 3
        delete Array.prototype.last; // the delete operator deletes a property
        [1, 2, 3].last(); // last is not a function
        ```

      * When a single method is monkey patched in two different places in your
        program, it's not always clear which monkey patch /wins/.

      * Monkey patching third-party libraries or the built-in objects, will
        inevitably create discrepancies between the documented and the actual
        behaviour.

      Source: #[MonkeyPatch]

      The example with the `merge` monkey patch is actually still not correct,
      consider the following case:

      ```JavaScript
      ({a: 1, merge: 3}).merge({b: 2});
      // TypeError: Property 'merge' of object #<Object> is not a function
      ```

      Objects are the easiest way to emulate hash maps in JavaScript, but as
      soon as the prototype of `Object` is monkey patched, objects can no
      longer be used safely as hash maps.<foot>Actually, even without monkey
      patching objects can't be used safely as hash maps, having a key called
      `toString` will also cause problems.</foot> As you saw in the example
      above, keys with the same name as a monkey patched method will break the
      behaviour of the hash map and the monkey patched method.

   Q: Given the pitfalls just listed, is monkey patching still encouraged in
      JavaScript or rather frowned upon?

   A: If done with care and for the right reasons, monkey patching is a
      defensible solution. Fixing a bug in a third-party library could be a
      valid reason, provided that the monkey patch will only be applied to
      faulty versions of the library.
