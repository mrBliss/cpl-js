# Implementation #[implementation]

Q: How is JavaScript implemented?

A: JavaScript has many different implementations. Just looking at the
   browsers, each one has its own implementation of JavaScript. Chrome uses
   the V8 JavaScript engine<foot>V8 is also used by [Node.js][nodejs].</foot>,
   the latest version of Firefox uses IonMonkey,<foot>It's hard to keep track
   of the current JavaScript engine of Firefox, they seem to change every
   couple of releases. Previous engines or parts of the engine include
   SpiderMonkey, TraceMonkey, and JÃ¤gerMonkey.</foot> Safari uses
   Nitro,<foot>Nitro was previously called SquirrelFish, which is another name
   for JavaScriptCore, the WebKit JavaScript engine.</foot> Opera uses Carakan
   (formerly Futhark), and lastly, Internet Explorer uses an engine called
   Chakra (versions prior to IE9 used an engine called JScript). These are
   just the JavaScript engines present in web browsers. Besides the web
   browser engines, there are also a few other engines in use such as
   Rhino,<foot>Rhino is written in Java and comes standard with the Java
   Development Kit.</foot> Nashorn,<foot>Nashorn ("nose horn", the German
   translation of rhinoceros) is the successor of Rhino. Nashorn is written in
   Java and takes advantage of the `invokedynamic` instruction that was added
   to version 7 of the JVM, which greatly improves the performance of dynamic
   function invocation. Function invocation in JavaScript is highly dynamic,
   as methods can be added and redefined at run-time.</foot> and
   Narcissus.<foot>Narcissus is a JavaScript engine written by Brendan Eich,
   the original creator of JavaScript. Narcissus is written in JavaScript for
   quick prototyping of new JavaScript features.</foot>

Q: That's a lot of engines. What do they have in common?

A: This plethora of implementations makes it hard to discuss /the/
   implementation of JavaScript. Most engines do have quite a few components
   in common. Most (if not all) of them execute JavaScript code using JIT
   (Just-In-Time) compilation. Let's delve a bit into the concept of JIT
   compilation before continuing the discussion on the most common parts of a
   JavaScript engine.

   ## Just-in-time compilation ##[jit]

   Q: Ok, what exactly is JIT compilation?

   A: JIT compilation means that the compiler is run /after/ the program has
      started and that program code is compiled (converted to machine code)
      /on the fly/ (at run-time, dynamically).

      This is in contrast to static compilation, in which source code is
      translated into machine code once (at compile time). Static compilers
      have the advantage that the whole of the program can be analysed and
      optimised. One of the downsides to this approach is that machine code is
      not portable from machine to machine, it has to be recompiled for every
      architecture.

      On the other end of the 'compilation spectrum' is /interpretation/. Code is never
      compiled and is interpreted as-is at run-time. This means the code
      remains portable across platforms. However, this has the disadvantage
      that performance is much worse, because every instruction is interpreted
      separately and no optimisations can be performed.

      At first, a JIT-compiler will just interpret or quickly compile without
      spending any time on optimising. At the same time, the JIT-compiler
      profiles the running code to identify 'hot' code. Whenever a function or
      a trace<foot>A trace is an execution path throughout a program that can
      span multiple function calls, but will only cover certain
      branches.</foot> is executed often enough, i.e. it is 'hot', e.g. a
      for-loop with many iterations, it will be compiled with another, more
      advanced compiler which also tries to optimise the code. The code is
      compiled /just in time/ before execution. Because the resulting code is
      known to be executed many times, the extra time spent compiling and
      optimising the code will pay off.

      JIT compilers often try to infer the types of variables to eliminate the
      type checks. Although the type of variables can change dynamically, it
      only happens very rarely in practice. For example, the compiler might
      figure out in advance that `a~=~b~+~c;` is either a string
      concatenation, or an integer addition. Even if the type would eventually
      change, the JIT compiler will provide an escape hatch that calls in to
      the interpreter, which is able to handle all cases.

      Another very common optimisation is function inlining. This means that
      function calls are replaced by their body with the arguments filled in.
      This way the overhead of calling the function is eliminated. A similar
      optimisation named /loop unrolling/ can also be applied. Loops with
      known bounds can be unrolled (exactly as functions can be inlined). This
      way, the overhead of checking the loop conditions is removed.

      By using JIT compilation, a midway between interpreted code and compiled
      code is found. Code remains portable while it is still possible to
      perform (machine-specific) optimisations and thus not sacrifice
      performance.

   Q: What are the main advantages of JIT compilation?

   A: A common goal of all JIT techniques is to reach or surpass the
      performance of static compilation while maintaining the advantages of
      interpretation. JIT compilation generally out-performs code
      interpretation by far (because of compiler-level optimisations).
      However, it may not be immediately clear how JIT compilation can be
      faster than static compilation. After all, a static compiler can analyse
      the entire program, compile and optimise it in its entirety (and has all
      the time to do so!). However, here are some reasons a JIT compiler has
      over a static compiler:

      * The JIT compiler can optimise for the targeted processor architecture
        and operating system. For example, SSE2 or another more advanced
        instruction set can be used when available. To obtain this effect with
        a~static compiler, one must either compile multiple versions (one
        with, one without SSE2) of the same program, or include multiple
        versions of the same code in the compiled program (`if SSE2 ... else
        ...`).
      * The system can collect information about how the program is currently
        running in the environment, and optimise code accordingly. For
        example, when a particular piece of code is /very hot/, the JIT
        compiler can perform extra optimisations on just this piece of code,
        whereas a static compiler must choose between performing these
        optimisations on the whole program, or not at all. Performing these
        optimisations on the whole program is often very time-consuming.
      * Improvements in compiler technology affect existing programs. A better
        C~compiler will not improve performance of C&nbsp;programs that have
        already been deployed. However, when a better JavaScript compiler is
        released, it will improve the performance of existing programs.

## Components of a JavaScript engine ##

Q: Why the term 'engine', why not just 'runtime' or 'interpreter'?

A: A JavaScript engine comprises multiple parts, not just a 'runtime' or
   'interpreter'. It usually consists of the following parts:

   * A base compiler or interpreter: parses the JavaScript<foot>Parsing is
     also often done as late as possible, i.e. just in time, to keep the
     initial start-up time low. Web sites heavy on JavaScript often include
     many libraries, of which not every single function or line of code will
     be executed. Parsing all the code upfront would be costly and
     unnecessary.</foot> and either generates (not highly optimised) native
     code or interprets the code.
   * An object model: in JavaScript, objects are represented as associative
     arrays/dicts. However, some engines choose to implement this differently
     behind the scenes. For example, V8 employs an internal type system called
     /hidden classes/, see #[V8Design].
   * A run-time profiler: monitors the system being run and identifies 'hot'
     code. This is code that can/should be optimised.
   * An optimising compiler: (re)compiles and optimises the 'hot' code.
   * Some engines support /deoptimization/: if the assumptions made about
     optimised code prove to be too optimistic, the optimised code can be
     /degenerated/. This is referred to as a /bail-out/.
   * A garbage collector: manages memory allocation, reclaims memory that is
     no longer being used. Ideally, the programmer should not need to worry
     about memory management. However, to write performant and clean programs,
     it is important to understand how the garbage collector works (the same
     is true for the other components).

## Garbage collection ##[garbage-collection]

Q: How is garbage collection performed in JavaScript?

A: Garbage collection is performed on objects that are no longer referenced.
   The specific way garbage collection is performed, depends on the engine. As
   an example, we'll look at the V8 engine. V8 uses a stop-the-world,
   generational, accurate, garbage collector. This means that V8:

   * Stops program execution when performing a garbage collection cycle.
   * Processes only part of the object heap in most garbage collection cycles.
     This minimises the impact of stopping the application.
   * Always knows exactly where all objects and pointers are in memory. This
     avoids falsely identifying objects as pointers which can result in memory
     leaks.

   In V8, the object heap is segmented into two parts: new space where objects
   are created, and old space to which objects surviving a garbage collection
   cycle are promoted. If an object is moved in a garbage collection cycle, V8
   updates all pointers to the object.

   Other engines might use different strategies for garbage collection.
   For example: JScript, the Microsoft JavaScript engine, uses a /'nongenerational mark-and-sweep garbage collector'/.
   You can check the sources for more implementation details, but 
   because of the plethora of different engines, we won't go too far into the details.
   
   Source: #[V8Design], #[JScriptGC]

Q: Can garbage collection be forced?

A: It's not possible to explicitly force garbage collection in JavaScript.
   Some programmers try to force this anyway by the use of the `delete`
   operator. `delete` was originally intended to remove values from a map,
   i.e. an object. One should avoid using `delete` to try and force memory
   deallocation. JavaScript engines tend to optimise objects behind the scenes
   and changing the structure of an object manually can force deoptimisation
   of an object. Another misconception among programmers is that setting an
   object reference to `null` implies that the object is deleted from memory,
   /nulled out/). This is not true. Only the reference is set to `null`, the
   object still lives in memory until it is garbage collected. If the
   reference you set to `null` was the last reference, the object will be
   garbage collected, otherwise it will remain in memory. The only way to
   manage memory efficiently in JavaScript is to scope your variables
   properly. Once variables fall out of scope, they will be garbage collected.
   So it is key to scope your variables as locally as possible. Also, try to
   avoid global variables. They are *never* garbage collected and will exist
   for the entire lifetime of your application, or, in case of web browsers,
   as long as the page is open.

## Representations ##

Q: Can you tell me some other interesting things about JavaScript engines?

A: Actually, in JavaScript `Object`s, `Array`s and `Number`s are all
   represented in a peculiar and sometimes rather inefficient fashion.

   ### Numbers ###[numbers]

   For example, the JavaScript standard declares that a JavaScript `Number` is
   actually a 64-bit floating point value, following the IEEE 754 standard. As
   `Number` is the only numeric type of JavaScript, this means that JavaScript
   doesn't support numbers represented by integers.


   Q: Why only one type of numbers and why floating point numbers?

   A: Having only one type of number, instead of a whole host of numbers of
      different size like in C, simplifies things a bit for programmers. It's
      also obvious to pick floating point numbers instead of integers as /the/
      type, as floating point numbers are a superset of integral numbers.

      A possible explanation for this choice is that Brendan Eich, the creator
      of JavaScript, as he had only limited time to define and implement
      JavaScript, opted for just one kind of numbers because he was short on
      time. However, as of yet, integers haven't been added in a later
      JavaScript standard.

   Luckily, the standard prescribes that positive and negative integers whose
   magnitude is no greater than 2<sup>53</sup> are representable in the
   `Number` type.

   Q: Why is that important?

   A: The most common number sizes in programming languages, often called
      /integer/ and /long/, are commonly 4 bytes and 8 bytes in size. Integers
      and longs can hold every integral number that fits in their range. In
      the case of floating point numbers, this isn't true, not every single
      number in the range of a floating point number can be correctly
      represent by a 4 or 8 byte floating point number. As a matter of fact,
      it's impossible, as there are already infinitely many numbers between
      every two integral numbers. This is a limitation for all programming
      languages.<foot>Some programming language provide a data type that
      allows arbitrary precision, like Java's `BigDecimal`.</foot>

      What would be rather problematic is that some of the numbers that aren't
      representable could be integral numbers. Adding, using floating point
      arithmetic, two integral numbers that sum to a number that is not
      exactly representable as a floating point number, would result in an
      incorrect result. Because the standard requires integral number whose
      magnitude is no greater than 2<sup>53</sup> to be representable,
      programmers can do calculations with a safe heart, as long as they stay
      within these bounds. As integers and longs have often respectively
      2<sup>31</sup>~-~1 and 2<sup>63</sup>~-~1 as maximum magnitudes,
      JavaScript has correct integral numbers up to a magnitude that lies
      between the common long's and integer's magnitude.

   It seems rather wasteful to reserve 64 bits for all numbers, however small
   they might turn out to be, like the majority of loop indexes. Some
   operations might also prove to be faster on integers than on floating point
   numbers.

   Many JavaScript engines try to figure whether a numeric value will remain
   integral or become a floating point number at some point. When the engine
   has concluded that a number will remain integral for its lifetime, it will
   be represented by an integer. Or V8 might try to represent the number as an
   integer for as long as it can, eventually converting it to a floating point
   number. V8 will for example represent most loop indices by integers.


   ### Objects ###

   As we already mentioned a couple of times, objects in JavaScript are
   equivalent to hash maps with strings as keys. Performing a lookup in a hash
   map is, of course, much slower than directly accessing a field of a struct
   or an object, whose fields or instance variables are located at fixed
   offsets.

   The V8 engine optimises property lookup in the following way: instead of
   representing the object as a hash map, it represents it as a /hidden class/
   with the properties as fields, offering fast lookup times. When a property
   is added at a later stage, another hidden class is created which will
   contain the new property, the original class will be updated to refer to
   the new class whenever the newly added property is accessed. See
   #[V8Design] for more details.

   ### Arrays ###

   Another peculiarity of JavaScript is the way `Array`s are implemented. As
   an `Array` is an object, properties can be added and removed. Have a look
   at the following interactions with an array:

   ```JavaScript
   var a = [1, 2, 3];
   // We can add properties
   a.foo = 3;
   a.foo; // 3
   a['foo']; // 3
   // Without apparent effects on the array
   a; // [1, 2, 3]
   a.length; // 3
   a[0]; // 1
   // The indexes are in fact converted to strings
   a['0']; // 1
   // By deleting an element in the middle of the array, we make it a
   // sparse array.
   delete a[1];
   a; // [1, , 3]
   a.length; // 3
   a[1]; // undefined
   ```

   An `Array` is in fact implemented as an `Object`, the indices are just the
   keys. And because the keys of an object must be strings, they are first
   converted to a string.

   In most languages array accesses can be performed in constant time. Let's
   compare an array lookup in JavaScript with an array lookup in the
   C~programming language. Array accesses in other languages are often
   implemented similar to C. In C, accessing an element `x` in array `a` at
   index `i` is equivalent to accessing a memory location of which the address
   is determined by adding `i` to `a`, which is actually a pointer. On most
   computer architectures, this can be achieved with one instruction.

   In JavaScript we have to convert the index to a string, and then perform a
   lookup in a hash map. This clearly takes a lot more than one instruction!
   Fortunately, most JavaScript engines optimise `Array`s by representing them
   as arrays like they are used in C. The indexes won't have to be converted
   to strings and the lookup can happen almost just as quickly as in C. There
   is a catch however, as soon as the array is made sparse, i.e. non
   contiguous, the optimisation has to be undone, because the `Array` starts
   to behave as a regular object again.

   Q: It seems like the `Object`s, `Array`s, and `Number`s are all designed
      without performance in mind. If we combine this with the dynamic nature,
      JavaScript must be very slow language. Is this the case?

   A: The dynamic nature of JavaScript indeed hinders optimisations like
      inlining. As almost everything can be changed at run-time, including
      methods and inheritance relations, it is very difficult to optimise
      JavaScript. But as we mentioned, most JavaScript engines have become
      very good at optimising JavaScript via the use of JIT compilation.
      `Object`s, `Array`s, and `Number`s can often be represented by a more
      optimal format. If the programmer sticks to some guidelines, like
      keeping `Array`s contiguous, not adding properties to `Object`s after
      creating them, not changing the type of a variable, i.e. limiting the
      dynamic nature of JavaScript, JavaScript can be efficiently executed.

      ## Benchmarks ##

      Let's have a look at some performance benchmarks. Keep in mind that it's
      very difficult to benchmark programming languages. These benchmarks are
      often unfair as the program used in the benchmark will differ from
      language to language in the degree of optimisation. Programs written for
      a benchmark are seldomly written in idiomatic style, and will be
      optimised much more than real world programs. Benchmarks rarely are an
      accurate yardstick to measure performance of a programming language for
      real word programs. But they can give you an idea of the raw speed a
      programming language can achieve when properly optimised.<foot>Keep in
      mind that making a programming language or a program faster is the same
      as decreasing the number of instructions to be executed to accomplish
      the same results.</foot>

      <html><img src="img/alioth.png" alt="benchmark" title="Benchmark results" width="400" height="300" /></html>

      The results show that in this benchmark C++ is the fastest
      language,<foot>Most programmers expect C to be the fastest, but again,
      this benchmark is not representative for all programs. It could be
      caused by the aggressive inlining that is done by C++ compilers.</foot>
      next comes C, then Java, Common Lisp, Haskell, OCaml, /JavaScript/
      (using Google's V8 engine), Smalltalk, PHP, Ruby, Python, and finally
      Perl. What is remarkable is that except for Common Lisp, JavaScript is
      the fastest dynamicly typed language. Common Lisp has existed for a much
      longer time than JavaScript, thus giving more time for compiler writers
      to optimise. Languages like Ruby, Perl, Python and Smalltalk are all
      older than JavaScript and have the same dynamic nature, but still prove
      to be an order of magnitude slower than JavaScript.


      Q: How come JavaScript seems to be much faster than the other dynamic
         languages?

      A: A lot of man-hours have been invested in optimising JavaScript
         engines, as JavaScript is the lingua franca of the web, and will not
         be going away any time soon. Every browser contains a JavaScript
         engine, and one of the ways to lure users over, as the browser market
         is a competitive one, is to have a faster browser. A performant
         JavaScript engine is a big part of this. This is actually an example
         of the free market principles: competition pushes companies, in this
         case Mozilla, Google, Microsoft, ... to improve their product, the
         browser, in order to win over customers.

## Concurrency & parallelism ##

Q: What kind of concurrency model does JavaScript have?

A: Being intended as a quick and easy scripting language for a web browser,
   JavaScript didn't come equipped with support for threads or other
   concurrency primitives. Each JavaScript program in the web browser is
   executed by a single thread.

   In web browsers it is very common for a user to interact with a page via
   events, e.g. clicking on an item or typing some text. These events are
   handled asynchronously. They are all put together in a single queue and are
   handled sequentially. A callback can be bound to an event. A callback is a
   function/closure passed as an argument that will be invoked whenever the
   associated event is triggered, see #[callback-hell]. This is another area
   where the presence of first-class functions in JavaScript comes in handy.

   ### Node.js ##[nodejs]

   This event-driven model actually inspired Ryan Dahl to create Node.js, a
   server-side version of JavaScript.<foot>With Node.js you can run JavaScript
   programs outside the web browser, like regular programs.</foot> He combined
   Google's V8 JavaScript engine with a self-written C~library libuv that
   implements non-blocking I/O, based on events. Node.js is intended to write
   scalable Internet applications, primarily web servers which are
   particularly event-driven.

   The premise of Node.js is that by performing all I/O operations
   asynchronously and minimising computations, the application will scale.
   Node.js programs are single-threaded. The program thread will continuously
   process incoming events that are triggered by completed I/O operations or
   incoming requests. Because of the minimal amount of computation, these
   events can be handled very quickly, allowing a larger number of concurrent
   operations, as most time is spent waiting on the I/O anyway.

   Q: Does the event-driven model scale well?

   A: The scalability of this model collapses as soon as an event requires a
      large computation or performs a blocking I/O operation. Another
      disadvantage of such programs is that they don't profit from multiple
      cores or processors. To take advantage of multiple cores, multiple
      processes running the same program have to be started, which is much
      less efficient than having multiple threads within one
      process.<foot>Python has a similar problem with the GIL, the global
      interpreter lock.</foot>

      The event-driven model is still suitable for event-driven programs with
      non-blocking I/O, such as web servers, the application Node.js's was
      originally intended for.

   ### Callback hell ###[callback-hell]

   When doing synchronous I/O, the program can be written in typical
   imperative style. However, when doing I/O asynchronously, programs can no
   longer be written as sequences of instructions where each instruction can
   refer to results of previous instructions. Asynchronous operations are
   performed in the background while the program continues execution. It's
   obvious that the next statement in the program cannot simply use the result
   of previously started asynchronous I/O operations, as they are performed in
   the background. To use such a result, we would have to wait for the
   asynchronous I/O operation to complete, which essentially makes the program
   blocking, i.e. synchronous again.

   The solution to this problem is to put the code to be executed after the
   asynchronous I/O operation completes inside a function, a callback,
   essentially a /continuation/. This function will then be executed when the
   result of the I/O operation is available. Compare the synchronous program
   below with the asynchronous one.

   ```NodeJS
   // Synchronous, blocking program
   var x = longSyncComputation();
   var y = slowSyncFileRead(x);
   var z = largeSyncFileDownload(y);
   //...
   // Asynchronous, non-blocking program
   longAsyncComputation(function(x) {
       slowAsyncFileRead(x, function(y) {
           largeAsyncFileDownload(function(z) {
               //...
           });
       });
   });
   ```

   You can already see that the latter example requires much more code and is
   harder to read. The nesting will keep increasing for every I/O operation
   you wish to perform. This phenomenon is called /callback hell/. Callbacks
   force the programmer to manually transform his program to continuation
   passing style. [Various libraries][async-libs] exist to ease the pain.
   Programmers familiar with /monads/ will see an excellent opportunity to
   apply monads. A notation similar to Haskell's `do`-syntax or Scala's
   `for`-expressions would make the code readable again and resemble the
   synchronous variant. Lisp macros are also a viable option.<foot>See
   #[CLJSMacros], a blog post about writing a macro to solve callback hell in
   ClojureScript, a variant of the Clojure programming language that compiles
   to JavaScript. Also see #[compiling-to-js].</foot>

   [async-libs]: https://github.com/joyent/node/wiki/modules#wiki-async-flow
   [cljs-macros]: http://brianmckenna.org/blog/cps_transform_js
