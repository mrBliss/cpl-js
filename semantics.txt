# Semantics #

## Object-oriented programming ##


Q: I've heard that JavaScript is an object-oriented language, could you expand
   on that?

A: Indeed, JavaScript is object-oriented. Typically, in object-oriented
   languages, everything is an object (e.g. Python, Scala, Ruby, Eiffel, ...)
   In JavaScript this is not the case, there are both objects and primitives.
   The primitives in JS are numbers, strings, booleans, and the special types
   null and undefined. The objects include `Array`, `Function`, `Date`,
   `RegExp`, `Error`, ... This design decision, by many people considered a
   mistake, was carried over from Java.

   ### Objects ###

   Objects in JavaScript are in fact containers of properties, where each
   property has a name and a value. By assigning a function to a property's
   value, one can add a method to the object. This demonstrates the importance
   of the presence of first-class functions. Objects in JavaScript can be
   compared with untyped hashmaps from strings to values from any kind. Then
   name of a property can be any string, but the quotes can be dropped if the
   name of the property is a valid JavaScript identifier. The quotes are
   required when the property name is a reserved keyword, an empty string, or
   other strings not constituting valid JavaScript identifiers.

   ```JavaScript
   var emptyObject = {};
   var person = {
       name: "Erin",
       age: 28,
       "place-of-birth": "Gibraltar", // hyphens are not allowed in JavaScript identifiers
       walk: function () { return "Do bi do ... walking, walking, walking"; }
   };
   ```

   Property lookup is done via the `.` notation. When the property name is not
   a valid JavaScript identifier, one has to use the bracket notation. Looking
   up a property of which the value is a function, just returns that function.
   To actually invoke it, terminate the expression with `()`.

   ```JavaScript
   person.name; // "Erin"
   person["place-of-birth"]; // "Gibraltar"
   person.walk; // [Function]
   person.walk(); // "Do bi do ... walking, walking, walking"
   ```

   This notation of objects is compact, easy to parse and parse, and has
   become a popular general data-interchange format, called JSON (JavaScript
   Object Notation).
   TODO expand on JSON


Q: Object-oriented programming includes more than "everything is an object".
   What about polymorphism, inheritance, etc.?

A: Of course, OOP is broader than "everything is an object". Most definitions
   of object-oriented programming include features such as modularity,
   encapsulation, polymorphism, inheritance, ...

   JavaScript has support most of them, but differs from other classical OO
   languages in the implementation of these features. Take for instance
   inheritance. Classical OO languages mostly feature a class-based
   inheritance mechanism, whereas JavaScript has prototype-based inheritance.
   JavaScript often has a different way of doing things compared to other
   languages, this will be a recurring theme.

   ### Prototype-based programming ###

   Q: What entails prototype-based inheritance?

   A: A better term would be prototype-based programming, as inheritance is
      just one non-mandatory ingredient of this style of object-oriented
      programming. Prototype-based programming can easily be explained by
      comparing it with class-based programming.

      In class-based programming, one defines classes. Each class consists of
      fields and methods. To use a class, one creates a new object of the
      class, which will have the fields and methods defined in the class.
      Let's make an analogy: the class is the blueprint of the car, and the
      objects are cars built from the blueprint. Now let's throw inheritance
      in the mix. One can define a class that inherits from another class.
      This new class will contain all the fields and methods of the parent
      class, but can add fields and methods, and can also override fields and
      methods.

      In prototype-based programming, one defines objects. Each object will
      consist of fields and methods, or in JavaScript's case, properties. The
      whole concept of classes is removed from the equation. Instead of
      defining a blueprint to build new cars with, one just builds a car. But
      does this mean that we have to build every car from scratch, i.e.
      (re)define the fields and methods for every objects we want to use? No,
      to make a new object with the same fields and methods as another object,
      we /clone/ the old object to get a new one. In other terms: we define a
      new object with the old object as prototype. Inheritance is also done
      via cloning, but after the cloning, the new object is extended with new
      fields and/or methods, and existing fields and/or methods can also be
      overriden. This new object can, in turn, be used as a prototype for
      other objects.

      Q: Could you show how it's done in JavaScript?

      A: In JavaScript, objects can be created via object literal. In this
         case, `Object` will be their prototype.

         ```JavaScript
         var o = {foo: "bar"};
         // Object.getPrototypeOf(x) returns the prototype of x
         Object.getPrototypeOf(o); // {}, which is an empty Object
         ```

         Another way to create objects in JavaScript, is via the `new`
         keyword, which you probably know from C++, Java, etc. The `new`
         keyword should be followed by a function call. The function after the
         `new` keyword is called the constructor. Objects created this way
         will have their constructor's prototype as their prototype.

         ```JavaScript
         // Car is a constructor
         function Car(make) {
             this.make = make;
         };
         Object.getPrototypeOf(Car); // [Function: Empty] is the prototype of a function
         // Define a new method for Car
         Car.prototype.drive = function() {
             println("Vroom");
         };
         var myCar = new Car("BMW");
         Object.getPrototypeOf(myCar); // { drive: [Function] }, the prototype of Car
         ```

         Notice that the name of the constructor function is capitalized, this
         is convention, carried over from Java.

         Q: If the naming is only a convention, how then differs a constructor
            from a regular function?

         A: It doesn't actually, it's the use of `new` that makes a regular
            function act like a constructor. By prepending this keyword, a
            couple of things happen, see #[func-invocation].

         Here's another example of inheritance in JavaScript.

         ```JavaScript
         // Create a new object that inherits from obj
         function inherit(obj) {
             function f() {}; // Dummy constructor
             // The new object's prototype is obj
             f.prototype = obj;
             // Make the new object
             return new f();
         }
         // Create a new object from scratch
         var a = {x: "a's x"};
         // Create a new object by cloning an existing object
         var b = inherit(a);
         // Change the value of b's x property
         b.x = "b's x";
         // This change only affects b
         a.x; // "a's x"
         b.x; // "b's x"
         ```

      Q: What are the pros and cons of prototype-based programming?

      A: Prototype-based programming gives the programmer more flexibility and
         freedom to define and redefine the fields and methods of objects
         dynamically. Instead of focusing on building a brittle taxonomy of
         classes, as in class-based programming, the focus lies on making a set
         of objects with the desired behaviour, reusing them via cloning, and
         modifying their behaviour when it's required. When building a taxonomy,
         it is often the case that some class at the bottom of the chain
         inherited some unwanted fields or methods, as it is not always possible
         to classify everything in a consistent taxonomy. Prototype-based
         programming gives you the freedom to clone and override the fields and
         methods of other objects at will.

         For example, you have a bunch of `Cat` objects, but you want one of the
         cats, named Dexter, to make a different meow-sound. You can simply
         change the `meow` method of Dexter, a single `Cat` object, without
         affecting the others, or having to define a new subclass of `Cat`.

         Having so much control over which fields and methods to /inherit/ allows
         the programmer to do things not possible in class-based languages
         without language support, for instance traits can easily be emulated
         using prototype-based programming. Even classes can be and often are
         emulated.

         Let's show you how to emulate classes using prototypes:

         ```JavaScript
         function Car(make) {
             this.make = make;
         };
         Car.prototype.drive = function() {
             println("Vroom");
         };
         // Constructor for the subclass SportsCar
         function SportsCar(make) {
             this.make = make;
         };
         // The prototype of SportsCar is a regular Car
         SportsCar.prototype = new Car();
         // We change the constructor, because we inherited Car's constructor
         SportsCar.prototype.constructor = SportsCar;
         SportsCar.prototype.driveFast = function() {
             this.drive(); this.drive();
         };

         // Instantiate a new SportsCar
         var mySportsCar = new SportsCar("BMW");
         mySportsCar.driveFast();
         // Vroom
         // Vroom
         ```

         The steps to create a subclass are often put together in a single
         function, allowing easy class-based inheritance.

         Traits are also easy to emulate, although we don't have access to the
         super objects anymore. Abstract members can also be emulated, but will
         not be checked at compile-time for presence.

         ```JavaScript
         // The Trait we define
         var HasTires = {
             tiresOk: true,
             puncture: function() {
                 this.tiresOk = false;
             }
         };
         // Add the properties of the trait to the prototype of obj
         var mixin = function(obj, trait) {
             for (var prop in trait) {
                 obj.prototype[prop] = trait[prop];
             }
         };
         // We'll continue with the SportsCar defined above
         mixin(SportsCar, HasTires);
         // The already defined mySportsCar now has the functionality defined in
         //  the HasTires trait
         mySportsCar.puncture();
         mySportsCar.tiresOk; // false
         ```

         Of course, freedom comes with a price. One of the disadvantages are the
         slower field and method accesses/dispatches and to a lesser extend the
         memory overhead. Objects cloned from others object don't clone the
         fields and methods. It would be wasteful to clone this reusable data.
         Instead, the cloned object keeps track of its prototype. Whenever an
         inherited field or method of the new object, i.e. a field or method
         defined in the prototype (or a prototype of the prototype), is accessed,
         the new object delegates the call to the prototype. This delegation will
         go on until a definition is found in one of the ancestor prototypes. The
         longer this /chain/ of prototypes, the costlier a field access or method
         call.

         Another disadvantage is that it becomes harder to figure out which
         fields and methods an object has, and where they were defined. When
         using classes, knowing the class of an object is enough to know which
         fields and methods an object has (this, of course, includes looking
         at superclasses). A class functions as the type of the object, but in
         JavaScript, properties can be added and removed from objects at
         run-time.


   ### Invoking functions ###[func-invocation]

   In JavaScript, a function can be invoked in four different ways:

   * As a function
   * As a method
   * As a constructor
   * Indirectly through `call()` or `apply()`

   Functions can behave differently, depending on the kind of invocation. For
   instance the value of `this`, will be different. In JavaScript, as in most
   object-oriented languages, `this` is a special keyword inside the context
   of a function that refers the object of which the function is a method,
   i.e. the owner of the method.

   #### Function invocation ####

   Function invocation, is the regular kind of invocation, like you would call
   functions (or procedures) in C, Haskell, or Lisp, i.e. in a non-OO
   language.

   For example:

   ```JavaScript
   function add(x, y) {
       return x + y;
   }
   ```

   Functions that don't contain an explicit `return`-statement, will return
   `undefined`, JavaScript's `void`.

   In the case of a regular function invocation, the value of `this` will be
   the global object. TODO refer to the global object

   #### Method invocation ####

   A function is considered a method when it's the property of an object. The
   big difference between function and method invocation, is that in the case
   of method invocation, `this` will refer to the object on which the method
   is called, instead of the global object.

   ```JavaScript
   function f() {
       return this.x;
   }
   // Function invocation
   var x = 1;
   f(); // 1
   // Method invocation
   var o = {x: 2, f: f};
   o.f(); // 2
   ```

   #### Constructor invocation ####

   When a function or method invocation is preceded by the `new` keyword, it
   is a constructor invocation.

   A few things are different for constructor invocations:

   * A new object is created and will be accessible via `this`.
   * The prototype of the constructor function is stored as the prototype of
     the new object.
   * The newly created object is automatically returned at the end of the
     function call, no explicit `return` is required.
   * When the constructor has no parameters, the parentheses after the
     function name are optional. E.g. `new Object()` vs `new Object`.

   Q: So you're saying, every function can be invoked as a constructor? What
      is the point of that?

   A: TODO

   #### Indirect invocation ####[indirect-invocation]

   The fourth and final kind of invocation, is indirect invocation. As
   `Function`s are also `Object`s in JavaScript, they can have methods. Two of
   the available methods of `Function`s are `call` and `apply`.<foot>For
   readers familiar with Common Lisp (or a [Lisp-2][lisp2] to be more
   precise), `call` is JavaScript's `funcall`. For readers familiar with any
   Lisp dialect, JavaScript's `apply` is similar to most Lisp's
   `apply`.</foot>

   [lisp2]: http://en.wikipedia.org/wiki/Lisp-1_vs._Lisp-2#The_function_namespace

   The `call` method is invoked on a function and takes at least one argument,
   the object to which `this` will refer in the context of the function. Extra
   arguments are passed to the function.

   The `apply` method is invoked on a function and takes at least one
   argument, the object to which `this` will refer in the context of the
   function. The optional second argument should be an `Array`, holding
   arguments that will be to the function.

   ```JavaScript

   function f(x, y) {
       return [this, x, y];
   }
   f.call({a: 'foo'},  1, 2); // [ { a: 'foo' }, 1, 2 ]
   f.apply({a: 'foo'}, [1, 2]); // [ { a: 'foo' }, 1, 2 ]
   ```

   Q: Can you give me a use case of these `call`- and `apply`-methods?

   A: A possible use case is the reuse of methods. Let's say we have an object
      (or a class) A with some methods. We also have some other, totally
      unrelated object B. There might be a method defined on A that we wish to
      invoke on B too, instead of copying the method from object A to object
      B, or making A B's prototype, we can simply invoke the method on object
      B.

      ```JavaScript
      // Object/Class A
      var Person = function(name) { this.name = name; };
      Person.prototype.introduce = function() {
          return "Hello, my name is " + this.name;
      };
      // Object B. We don't want B to inherit from A. We could add the
      // `introduce`-method as a property to B, but indirect invocation is much
      // cheaper that copying the method, and then performing a method
      // invocation.
      var car = {name: 'Mater', town: 'Radiator Springs'};
      Person.prototype.introduce.call(car);
      ```

   ### Encapsulation ###

   Another example of JavaScript's /exotic/ way of doing things is
   encapsulation. Most classical OO languages support visibility modifiers to
   control the accessibility of fields and methods by other classes. In
   JavaScript, there are no such modifiers, but encapsulation is still
   achievable, via the use of closures.

   Example:

   ```Java
   class A {
       private int counter = 0;
       public void inc() {
           counter++;
       }
   }
   ..
   A a = new A();
   a.inc(); // OK
   a.counter; // Error: not visible!
   ..
   ```
   ```JavaScript
   var a = (function () {
       var counter = 0;
       return {
           inc: function() {
               counter++;
           },
       };
   })();
   a.inc(); // OK
   a.counter; // Error: not visible!
   ```


   Q: What is a closure?

   A: Before explaining what a closure is, you have to know some things about
      JavaScript's scoping rules

      #### Function & global scope ###

      JavaScript's scoping rules differ from common languages like C and Java.
      In C and Java, curly braces (`{...}`) delimit different scopes. The body
      of a function, a while-loop, a for-loop, a class (in the case of Java),
      all have a separate scope (known as /block scope/). In JavaScript, there
      are only two kinds of scope: the global scope and function scope.

      Let's see some examples of these differing scoping rules

      ```Java
      for (int i = 0; i < 10; i++) {
          // ...
      }
      System.out.println(i); // Error: i is undefined here,
      // it is only accessible within the scope of the for-loop

      int a = 10;
      {
          // A new scope
          a = 3;
      }
      System.out.println(a); // 10
      ```

      ```JavaScript
      for (var i = 0; i < 10; i++) {
          // ...
      }
      println(i); // 10

      var a = 10;
      {
          // No new scope
          a = 3;
      }
      println(a); // 3
      ```

      By default all variables will be defined in the global scope, i.e. they
      will be global variables. This sends cold shivers down many a
      programmer's spine. The only way to delimit the scope of variable
      definitions is by wrapping them in a function.

      ```JavaScript
      var x = 3;
      (function() {
          var x = 10;
          // x = 10
      })(); // This function is invoked immediately after definition
      println(x); // 3
      ```

      #### Variable hoisting ####

      In this intermezzo, another peculiarity of JavaScript's scoping rules is
      introduced, /variable hoisting/.

      ```JavaScript
      var f = function() {
          return y;
      };
      // ...
      var y = 3;
      f(); // 3
      ```

      In the example above, we define the function `f` which returns the value
      of the undefined variable `y` when called. A bit later in the program,
      but still in the same scope (global or function), we define the variable
      `y`. Finally, we invoke `f`, which returns `3`. Shouldn't the definition
      of `f` fail with an error message complaining about the undefined
      variable `y`? What actually happens, is that all variable declarations
      in the current scope are moved to the beginning of the scope. Only the
      declarations, not the initialisations.

      What happens under the hood is the following:

      ```JavaScript
      var f, y;
      f = function() {
          return y;
      };
      // ...
      y = 3;
      f(); // 3
      ```

      In this case, some people might consider variable hoisting to be
      advantageous, but that's not always the case, see the following example:

      ```JavaScript
      var x = 0;
      function f() {
          println("A: " + x);
          var x = 1;
          println("B: " + x);
      }
      f();
      // A: undefined
      // B: 1
      ```

      Most programmers would expect the first `println`-statement to print out
      `A: 0`. What actually happens is the following:

      ```JavaScript
      var x = 0;
      function f() {
          var x; // x is now declared, but uninitialised, i.e. `undefined`
          println("A: " + x);
          x = 1;
          println("B: " + x);
      }
      f();
      ```


      This phenomenon is called /variable hoisting/. The variable declarations
      are hoisted to the top of the scope, but the initialisations are left in
      place.

      Q: Why does JavaScript do this?

      A: This is just one of JavaScript's many quirks. It's sometimes
         difficult to imagine what Brendan Eich must have been thinking when
         designing JavaScript...

      #### Lexical & dynamic scope ####

      We assume you're already familiar with lexical and dynamic scoping, so
      we'll quickly glance over it.

      In the case of lexical scoping, functions are invoked in the scope that
      was active during the definition of the function. In the case of dynamic
      scoping, functions are invoked in the scope active during the invocation
      of the function. Let's show difference with an example.

      ```JavaScript
      var f = (function() {
          var z = 'lexical';
          return function() {
              return z;
          };
      })();

      var z = 'dynamic';
      f(); // 'lexical' when lexically scoped,
           // 'dynamic' in the other case
      ```

      JavaScript is lexically scoped, as is Scheme, one of JavaScript's
      biggest influences TODO ref scheme. The return value of `f` in the
      example above will be 'lexical'.

      Q: Why

      #### Closures ####

      Let's have another look of the example that we showed you to demonstrate
      encapsulation.

      ```JavaScript
      var a = (function () {
          var counter = 0;
          return {
              inc: function() {
                  counter++;
              },
          };
      })();
      a.inc(); // OK
      a.counter; // Error: not visible!
      ```

      As JavaScript is lexically scoped, functions have to capture the scope
      that was active during their definition. Essentially, what happens is
      that all variables defined in a scope outside the defined function but
      referenced from within the scope of the function, known as /free
      variables/, have to be captured. In the example above, the function
      defined on line 4 references a variable `counter` (line 5), that was
      defined in another scope (line 2). The free variables are /closed/-over,
      they are /captured/ by the closure. One can think of a closure as a pair
      of a function, i.e. code, and its environment, i.e. data.

      Encapsulation can be achieved by defining the variables meant to be
      private in a function (scope) A, and defining a new function B within A,
      that references these variables. The closure of function B will capture
      these private variables. By holding onto function B, but discarding
      function (scope) A, only B will be able to access these private
      variable,<foot>Unless function B leaks them via its properties.</foot>
      effectively achieving encapsulation.


   Q: What are the advantages of implementing encapsulation via closures?

   A: Actually, one could call it /emulating/ encapsulation via closures.
      Because of the absence of built-in encapsulation via
      visibility-modifiers, JavaScript programmers are required to implement
      encapsulation manually via closures. So one could call it a disadvantage
      of JavaScript, although some people argue against encapsulation.

      With closures, the programmer has more control over encapsulation, but
      has to do more work to achieve it.



   ### Polymorphism ###

   Polymorphism in JavaScript is achieved through inheritance or duck typing.

   Example of polymorphism through inheritance:

   ```JavaScript
   // Superclass Animal
   var Animal = function(name) { this.name = name; };
   // Default implementation of makeNoise
   Animal.prototype.makeNoise = function() { return "Silence"; };

   // Subclass Dog
   var Dog = function(name) { this.name = name; };
   Dog.prototype = new Animal();
   // Override makeNoise
   Dog.prototype.makeNoise = function() { return "Bark"; };

   // Subclass Turtle
   var Turtle = function(name) { this.name = name; };
   // Don't override makeNoise
   Turtle.prototype = new Animal();

   var animals = [new Dog("Pluto"), new Turtle("Jeffrey")];

   for (var i = 0; i < animals.length; i++) {
       println(animals[i].makeNoise());
   }
   // Bark
   // Silence
   ```

   Example of polymorphism through duck-typing:

   ```JavaScript
   var Dog = function(name) {
       this.name = name;
       this.makeNoise = function() { return "Bark"; };
   };

   var Turtle = function(name) {
       this.name = name;
       this.makeNoise = function() { return "Silence";};
   };

   var animals = [new Dog("Pluto"), new Turtle("Jeffrey")];

   for (var i = 0; i < animals.length; i++) {
       println(animals[i].makeNoise());
   }
   // Bark
   // Silence
   ```

   >[Wikipedia on Duck typing][wiki-duck-typing] Duck-typing is a style of
   dynamic typing in which an object's methods and properties determine the
   valid semantics, rather than its inheritance from a particular class or
   implementation of a specific interface.

   [wiki-duck-typing]: http://en.wikipedia.org/wiki/Duck_typing

   In the example above, all objects have the required `makeNoise` function
   as a property, thus satisfy the required /semantics/.

   Q: Which of the two is preferable, polymorphism through inheritance, or
      through duck typing?

   A: To obtain polymorphism through inheritance, you have to set up the
      inheritance relation, including boilerplate code (constructors, method
      prototypes, ...). This requires more work from the programmer. The
      advantage of this approach is that the methods can be inherited from
      prototypes of objects, requiring less memory than storing a method for
      each object.

      Not having to set up the inheritance relation, is one of advantages duck
      typing. It's sufficient to add the appropriate methods to the objects
      that will participate in this application of polymorphism.

   Q: You mentioned that one can /override/ a method in JavaScript, is it also
      possible to /overload/ a method in JavaScript?

   A: To be clear, a method (or function) overloads another method if it has
      the same name, but differs in the number of arguments or the types of
      the expected arguments. The right method to call is chosen statically,
      at compile-time. Overloading is a feature typically present in
      statically typed languages. With JavaScript being a dynamically typed
      language, the compile-time resolution that determines which method to
      call is ruled out, as the types are not known in advance.

      ### Function arguments ###

      Overloading based on arity is possible in dynamically typed languages,
      but not in JavaScript. The reason being that JavaScript doesn't check
      whether a function is called with the correct number of arguments.
      JavaScript will happily allow you to call a function expecting two
      arguments with 0, 1, 2, 3, ... arguments. Missing arguments will be
      `undefined`. JavaScript also allows you to access the excess arguments
      via the `arguments` object. The `arguments` object is a local variable
      accessible within all functions. It is similar to an Array, but not
      quite the same. The elements of `arguments` can be accessed, and it has
      the `length`-property, but the other methods available for `Array`s
      cannot be used on the `arguments` object. One can convert the
      `arguments` object to an actual array, by calling `Array`'s
      `slice`-method on it, like so: `var args =
      Array.prototype.slice.call(arguments);`.<foot>The `slice`-method of
      `Array` copies the elements into a new array, it optionally takes start-
      and end-indices. See #[indirect-invocation] for more about the
      `call`-method.</foot>


      TODO default parameters (compare with CL?)

      Q: What's the point of this `arguments` object? And why isn't it a
         proper `Array`?

      A: The `arguments` object allows the programmer to define methods
         expecting a variable number of arguments.

         Example:

         ```JavaScript
         // Sums all its arguments. The argument list is empty, because we'll
         // use the arguments object.
         function addAll() {
             var args = Array.prototype.slice.call(arguments);
             var total = 0;
             // args.shift() removes the first element from the array, and
             // returns that element.
             while (args.length > 0) total += args.shift();
             return total;
         }
         ```

         Even when expecting a fixed number of arguments, the programmer can
         benefit from access to the `arguments` object. For instance when
         implementing a decorator.

         ```JavaScript
         function decorate(toDecorate, decorator) {
             return function() {
                 // Both the decorator and the function to decorate can be
                 // called with the same arguments.
                 decorator.apply(null, arguments);
                 return toDecorate.apply(null, arguments);
             };
         };

         function argsPrinter() {
             var args = Array.prototype.slice.call(arguments);
             println("Arguments: " + args.join(", "));
         };

         function add(x, y) { return x + y; };

         decorate(add, argsPrinter)(1, 2);
         // Arguments: 1, 2
         // => 3
         ```


      JavaScript's loose call convention, and the presence of the `arguments` object
      allows the programmer to emulate overloading by doing the resolution at
      run-time.

      Example:

      ```Java
      void overloaded() { return "No args"; }
      void overloaded(int x) { return "A number"; }
      void overloaded(String x) { return "A string"; }
      void overloaded(int x, String y) { return "A number and a string"; }
      ```

      ```JavaScript
      function overloaded(arg1, arg2) {
          // One could also use an if-then-else construction
          switch (arguments.length) {
          case 0: return "No args"; break;
          case 1: switch (typeof(arg1)) {
                  case 'number': return "A number"; break;
                  case 'string': return "A string"; break;
                  }
                  break;
          case 2: if (typeof(arg1) == 'number' && typeof(arg2) == 'string')
                      return "A number and a string";
          }
      }
      // Identical for the Java program
      overloaded();
      // No args
      overloaded(1);
      // A number
      overloaded("foo");
      // A string
      overloaded(1, "foo");
      // A number and a string
      ```

      These `return`-statements could of course be replaced with different
      blocks of code, specific for each case.

      Of course, doing this resolution at run-time has a negative impact on
      the performance.



   ### Modularity ###

   TODO Modularity in JavaScript p 306



## Functional programming ##

TODO functional programming p 331

## Monkey-patching ##

TODO
